#!/usr/bin/env python
# vim: set expandtab ts=4 sw=4:

'''
Logster parser for Nginx combined logs with timing information

Parses Nginx combined logs generated by a custom log_format to include
total request handling time, response time from the upstream server, if
any, and whether the response was pipelined. 

Example:

    sudo ./logster --dry-run --output=ganglia NginxTimingLogster /var/log/nginx/example.com-timing.access.log

This parser expects log lines which look like:

    ::ffff:67.202.50.86 - - [15/Jun/2012:06:28:51 +0000]  "GET /api/ping HTTP/1.1" 200 45 "-" "Cloudkick/1.1 (https://support.cloudkick.com/Main_Page)" 0.136 0.002 . 

Appropriate log lines can be generated using this log_format:

    log_format combined_timing '$remote_addr - $remote_user [$time_local]  '
                              '"$request" $status $body_bytes_sent '
                              '"$http_referer" "$http_user_agent" '
                              '$request_time $upstream_response_time $pipe ';

Note the final three elements, $request_time, $upstream_response_time, and $pipe, which append timing information
after the normal combined log format line. 

'''

###
###
###  Copyright 2011, Etsy, Inc., Christopher H. Casebeer
###
###  This file is part of Logster.
###
###  Logster is free software: you can redistribute it and/or modify
###  it under the terms of the GNU General Public License as published by
###  the Free Software Foundation, either version 3 of the License, or
###  (at your option) any later version.
###
###  Logster is distributed in the hope that it will be useful,
###  but WITHOUT ANY WARRANTY; without even the implied warranty of
###  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
###  GNU General Public License for more details.
###
###  You should have received a copy of the GNU General Public License
###  along with Logster. If not, see <http://www.gnu.org/licenses/>.
###

import time
import re
import HttpParser

from logster_helper import MetricObject, LogsterParser
from logster_helper import LogsterParsingException

class NginxTimingLogster(LogsterParser):

    def __init__(self, option_string=None):
        '''Initialize any data structures or variables needed for keeping track
        of the tasty bits we find in the log we are parsing.'''
        self.http_1xx = 0.0
        self.http_2xx = 0.0
        self.http_3xx = 0.0
        self.http_4xx = 0.0
        self.http_5xx = 0.0

        methods = [ 'GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'HEAD' ]
        self.http_methods = dict([(method, 0.0) for method in methods])

        self.response_times = []
        self.upstream_times = []

        # Regular expression for matching lines we are interested in, and capturing
        # fields from the line (in this case, http_status_code).
        self.reg = re.compile('.*"(?P<method>{methods})? (?P<path>[^ ]+) HTTP/1.\d\" (?P<http_status_code>\d{{3}}) .* (?P<response_time>[0-9]+\.[0-9]+) (?P<upstream_time>[0-9]+\.[0-9]+) [.|p] *'.format(methods="|".join(methods)))

# example log line:
# ::ffff:67.202.50.86 - - [15/Jun/2012:06:28:51 +0000]  "GET /api/ping HTTP/1.1" 200 45 "-" "Cloudkick/1.1 (https://support.cloudkick.com/Main_Page)" 0.136 0.002 . 


    def parse_line(self, line):
        '''This function should digest the contents of one line at a time, updating
        object's state variables. Takes a single argument, the line to be parsed.'''

        try:
            # Apply regular expression to each line and extract interesting bits.
            regMatch = self.reg.match(line)

            if regMatch:
                linebits = regMatch.groupdict()
                status = int(linebits['http_status_code'])
                method = linebits['method']
                path = linebits['path']
                response_time = float(linebits['response_time']) if linebits['response_time'] else None
                upstream_time = float(linebits['upstream_time']) if linebits['upstream_time'] else None

                if (status < 200):
                    self.http_1xx += 1
                elif (status < 300):
                    self.http_2xx += 1
                elif (status < 400):
                    self.http_3xx += 1
                elif (status < 500):
                    self.http_4xx += 1
                else:
                    self.http_5xx += 1

                # methods
                if method in self.http_methods:
                    self.http_methods[method] += 1

                # timings
                if response_time:
                    self.response_times.append(response_time)
                if upstream_time:
                    self.upstream_times.append(upstream_time)
                # todo: per-path timings

            else:
                raise LogsterParsingException, "regmatch failed to match"

        except Exception, e:
            raise LogsterParsingException, "regmatch or contents failed with %s" % e


    def get_state(self, duration):
        '''Run any necessary calculations on the data collected from the logs
        and return a list of metric objects.'''
        self.duration = duration

        # Return a list of metrics objects
        ret = [
                MetricObject("http_1xx", (self.http_1xx / duration), "Responses per sec"),
                MetricObject("http_2xx", (self.http_2xx / duration), "Responses per sec"),
                MetricObject("http_3xx", (self.http_3xx / duration), "Responses per sec"),
                MetricObject("http_4xx", (self.http_4xx / duration), "Responses per sec"),
                MetricObject("http_5xx", (self.http_5xx / duration), "Responses per sec"),
            ] 
        ret += \
            [ 
                MetricObject("http_{method}".format(method=method), (self.http_methods[method] / duration), "Responses per sec") \
                for method in self.http_methods
            ]

        if len(self.response_times) > 0:
            ret.append(
                MetricObject("http_response_time", reduce(lambda a,b:a+b, self.response_times) / len(self.response_times), "seconds")
                )

        if len(self.upstream_times) > 0:
            ret.append(
                MetricObject("http_upstream_time", reduce(lambda a,b:a+b, self.upstream_times) / len(self.upstream_times), "seconds")
                )
        return ret
                

